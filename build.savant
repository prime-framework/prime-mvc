/*
 * Copyright (c) 2014-2022, Inversoft Inc., All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"

asmVersion = "9.2.0"
dropWizardVersion = "3.2.6"
easyMockVersion = "4.2.0"
freemarkerVersion = "2.3.30"
fusionAuthJWTVersion = "3.1.6"
guavaVersion = "30.1.0-jre"
guiceVersion = "5.0.1"
jacksonVersion = "2.13.2"
jsoupVersion = "1.12.1"
logbackVersion = "1.3.0-alpha12"
nettyVersion = "4.1.70"
restifyVersion = "4.0.0"
slf4jVersion = "2.0.0-alpha5"
testngVersion = "7.3.0"

project(group: "org.primeframework", name: "prime-mvc", version: "2.1.0", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "compile") {
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
      dependency(id: "com.google.inject:guice:${guiceVersion}")
      dependency(id: "com.inversoft:restify:${restifyVersion}")
      dependency(id: "io.dropwizard.metrics:metrics-core:${dropWizardVersion}")
      dependency(id: "io.fusionauth:fusionauth-jwt:${fusionAuthJWTVersion}")
      dependency(id: "io.netty:netty-buffer:${nettyVersion}")
      dependency(id: "io.netty:netty-codec:${nettyVersion}")
      dependency(id: "io.netty:netty-codec-http:${nettyVersion}")
      dependency(id: "io.netty:netty-common:${nettyVersion}")
      dependency(id: "io.netty:netty-handler:${nettyVersion}")
      dependency(id: "io.netty:netty-transport:${nettyVersion}")
      dependency(id: "javax.inject:javax.inject:1.0.0")
      dependency(id: "org.freemarker:freemarker:${freemarkerVersion}")
      dependency(id: "org.ow2.asm:asm:${asmVersion}")
      dependency(id: "org.slf4j:slf4j-api:${slf4jVersion}")
    }
    group(name: "runtime") {
      dependency(id: "com.google.guava:guava:${guavaVersion}", skipCompatibilityCheck: true)
    }
    group(name: "test-compile", export: false) {
      dependency(id: "org.easymock:easymock:${easyMockVersion}")
      dependency(id: "org.testng:testng:${testngVersion}")
      dependency(id: "org.jsoup:jsoup:${jsoupVersion}")
    }
    group(name: "test-runtime") {
      dependency(id: "ch.qos.logback:logback-classic:${logbackVersion}")
      dependency(id: "ch.qos.logback:logback-core:${logbackVersion}")
    }
  }

  publications {
    standard()
    main {
      publication(name: "${project.name}-simulator", type: "jar",
                  file: "build/jars/${project.name}-simulator-${project.version}.jar",
                  source: "build/jars/${project.name}-simulator-${project.version}-src.jar")
    }
  }
}

// Plugins
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
java = loadPlugin(id: "org.savantbuild.plugin:java:1.0.2")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:1.0.9")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

// Plugin settings
// Note: Pending support from EasyMock to move to 17. The following issue should be fixed in 4.4, waiting for that release.
// https://github.com/easymock/easymock/issues/274
// https://github.com/easymock/easymock/releases
java.settings.javaVersion = "14"
javaTestNG.settings.javaVersion = "14"

target(name: "clean", description: "Cleans the project") {
  java.clean()
}

target(name: "compile", description: "Compiles the project") {
  java.compileMain()

  // allow the user of sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl in tests
  java.settings.compilerArguments += " -XDignore.symbol.file"
  java.compileTest()

  file.copy(to: "build/classes/main") {
    fileSet(dir: "src/main/ftl")
  }
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()

  // Create a separate test jar that only includes org/primeframework
  file.copy(to: "build/classes/simulator") {
    fileSet(dir: "build/classes/test", includePatterns: [~/org\/primeframework.+/])
  }

  // Create a separate test jar that only includes org/primeframework
  file.copy(to: "build/src/simulator") {
    fileSet(dir: "src/test/java", includePatterns: [~/org\/primeframework.+/])
  }

  file.jar(file: "build/jars/${project.name}-simulator-${project.version}.jar") {
    fileSet(dir: "build/classes/simulator")
  }

  file.jar(file: "build/jars/${project.name}-simulator-${project.version}-src.jar") {
    fileSet(dir: "build/src/simulator")
  }
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
//  May be needed for Java 17
//  javaTestNG.settings.jvmArguments = "--add-opens=java.base/java.lang=ALL-UNNAMED"
  javaTestNG.test()
}

target(name: "doc", description: "Generate the project's JavaDoc", dependsOn: ["jar"]) {
  java.document()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  dependency.integrate()
}

target(name: "list-unused-dependencies", description: "Lists the unused dependencies of the project",
       dependsOn: ["compile"]) {
  dependency.listUnusedDependencies()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["test"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}
